import subprocess
import json
import re

def run_vulnerability_scan(target: str) -> dict:
    try:
        # Run Nmap with vulners script
        nmap_command = [
            "nmap", "-sV", "--script", "vulners", target
        ]
        result = subprocess.run(nmap_command, capture_output=True, text=True, timeout=180)

        if result.returncode != 0:
            return {"error": "Nmap scan failed", "details": result.stderr}

        output = result.stdout
        return parse_vulnerabilities(output)

    except subprocess.TimeoutExpired:
        return {"error": "Scan timed out"}
    except Exception as e:
        return {"error": str(e)}

def parse_vulnerabilities(nmap_output: str) -> dict:
    vulnerabilities = []
    lines = nmap_output.splitlines()
    current_port = None
    current_service = None
    current_vulns = []

    cve_pattern = re.compile(r'(CVE-\d{4}-\d{4,7})\s+(\d+\.\d)\s+(https?://\S+)')

    for line in lines:
        line = line.strip()

        # Detect new port + service
        if re.match(r'^\d+/tcp\s+open\s+\S+', line):
            if current_port and current_vulns:
                vulnerabilities.append({
                    "port": current_port,
                    "service": current_service,
                    "vulnerabilities": current_vulns
                })
            parts = line.split()
            current_port = parts[0].split("/")[0]
            current_service = " ".join(parts[2:])
            current_vulns = []

        # Extract CVE details
        if "CVE-" in line:
            match = cve_pattern.search(line)
            if match:
                cve_id = match.group(1)
                score = float(match.group(2))
                link = match.group(3)

                risk = (
                    "Low" if score < 4.0 else
                    "Medium" if score < 7.0 else
                    "High" if score < 9.0 else
                    "Critical"
                )

                current_vulns.append({
                    "cve": cve_id,
                    "cvss_score": score,
                    "risk": risk,
                    "description": f"See details at {link}",
                    "reference": link
                })

    # Add last group if valid
    if current_port and current_vulns:
        vulnerabilities.append({
            "port": current_port,
            "service": current_service,
            "vulnerabilities": current_vulns
        })

    return {
        "target": nmap_output.splitlines()[0] if nmap_output else "",
        "vulnerability_results": vulnerabilities
    }
